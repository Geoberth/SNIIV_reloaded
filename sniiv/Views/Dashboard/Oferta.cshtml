@{
    ViewData["Title"] = "Demanda";
    List<SelectListItem> aniosRegistro = (List<SelectListItem>)ViewBag.aniosRegistro;
    string fechaRegistro = ViewBag.fechaRegistro;

    List<SelectListItem> aniosInventario = (List<SelectListItem>)ViewBag.aniosInventario;
    List<SelectListItem> mesesInventario = (List<SelectListItem>)ViewBag.mesesInventario;
    string fechaInventario = ViewBag.fechaInventario;
}

@section Scripts
{
    <script src="~/js/util.js" type="text/javascript"></script>
    <!-- DC -->
    <link href="~/css/dc/dc.css" rel="stylesheet" type="text/css" />
    <link href="~/css/dashboard.css" rel="stylesheet" type="text/css" />
    <script src="~/js/dc/d3.js" type="text/javascript"></script>
    <script src="~/js/dc/d3.tip.js" type="text/javascript"></script>
    <script src="~/js/dc/crossfilter.js" type="text/javascript"></script>
    <script src="~/js/dc/dc.min.js" type="text/javascript"></script>
    <script src="~/js/colorbrewer.js" type="text/javascript"></script>
    <script type="text/javascript">
        var countR, countI;
        var mapEstado,
            numberDisplayTotal,
            barChartsegmento,
            pieCharttipo_vivienda,
            rowChartsegmento_uma,
            pieChartPCU;
        var anio_inicio, anio_fin;

        var mapEstadoInv,
            numberDisplayTotalInv,
            barChartsegmentoInv,
            pieCharttipo_viviendaInv,
            rowChartsegmento_umaInv,
            pieChartPCUInv;
        var unidadesChart = "viviendas";
        $(function () {
            //activaTab('oferta');

            countR = 0;
            countI = 0;

            $("#btn_aceptar").click(function () {
                initializeDashBoard();
            });

            $('#tabR a').click(function (e) {
                e.preventDefault();
                if (countR < 1)
                    initializeDashBoard();
                countR++;
            });
            $('#tabI a').click(function (e) {
                e.preventDefault();
                if (countI < 1)
                    initializeDashBoardI();
                countI++;
            });

            $('#ddl_inicio_inventario').change(async function () {
                anio_inicio = $('[id$=ddl_inicio_inventario]').val();
                mes = await mostrarMes();
                initializeDashBoardI(anio_inicio, mes);
            });

            $('#ddl_fin_inventario').change(function () {
                mes = $('#ddl_fin_inventario').val();
                initializeDashBoardI(anio_inicio, mes);
            });

            $('.tab-active').addClass('active');
            $('#tabI a').click();
        });

        //#region Registro

        function initializeDashBoard() {
            anio_inicio = $('[id$=ddl_inicio]').val();
            anio_fin = $('[id$=ddl_fin]').val();
            var aux;
            if (anio_inicio > anio_fin) {
                aux = anio_inicio;
                anio_inicio = anio_fin;
                anio_fin = aux;
            }

            mapEstado = dc.geoChoroplethChart('#mapEstado', 'registro');
            numberDisplayTotal = dc.numberDisplay('#numberDisplayTotal', 'registro');
            barChartsegmento = dc.barChart('#barChartsegmento', 'registro');
            pieCharttipo_vivienda = dc.pieChart('#pieCharttipo_vivienda', 'registro');
            rowChartsegmento_uma = dc.rowChart('#rowChartsegmento_uma', 'registro');
            pieChartPCU = dc.pieChart('#pieChartPCU', 'registro');

            d3.json(path + 'DashboardAPI/GetKPIsRegistro2/' + anio_inicio + '/' + anio_fin, function (error, counts) {
                var ndx = crossfilter(counts),
                    estado = ndx.dimension(function (d) { return d.estado; }),
                    groupEstado = estado.group().reduceSum(function (d) { return + d.viviendas; }),
                    total = ndx.groupAll().reduceSum(function (d) { return + d.viviendas; }),
                    pcu = ndx.dimension(function (d) { return d.pcu; }),
                    groupPCU = pcu.group().reduceSum(function (d) { return + d.viviendas; })
                segmento = ndx.dimension(function (d) { return d.segmento; }),
                    groupSegmento = segmento.group().reduceSum(function (d) { return + d.viviendas; }),
                    tipo_vivienda = ndx.dimension(function (d) { return d.tipo_vivienda; }),
                    groupTipoVivienda = tipo_vivienda.group().reduceSum(function (d) { return + d.viviendas; }),
                    segmento_uma = ndx.dimension(function (d) { return d.segmento_uma; }),
                    groupSegmentoUMA = segmento_uma.group().reduceSum(function (d) { return + d.viviendas; });

                d3.json('../js/maps/mx.json', function (jsonData) {
                    var projection = d3.geo.mercator()
                        .center(center_map)
                        .translate([width_map / 1.7, height_map / 1.7])
                        .scale([width_map / .6]);
                    var colorSchemeSelect = color_map;
                    var colorScheme = colorbrewer[colorSchemeSelect];
                    var quantiles = quantiles_map;
                    var estados = groupEstado.all();
                    var min = Math.min.apply(null, estados.map(x => x.value));
                    var max = Math.max.apply(null, estados.map(x => x.value));
                    mapEstado
                        .width(width_map)
                        .height(height_map)
                        .dimension(estado)
                        .group(groupEstado)
                        .projection(projection)
                        .overlayGeoJson(jsonData.features, 'name', function (d) {
                            return d.properties.name;
                        })
                        .colors(d3.scale.quantile().range(colorScheme[quantiles]))
                        .colorDomain([min, max])
                        .colorCalculator(function (d) {
                            return d ? mapEstado.colors()(d) : '#ccc';
                        })
                        .title(function (d) {
                            return d.key + ": " + d3.format(',.0f')(d.value) + (" " + unidadesChart);
                        });

                    numberDisplayTotal
                        .group(total)
                        .formatNumber(d3.format(',.0f'))
                        .valueAccessor(function (d) { return d; });

                    function calc_domain(chart) {
                        var min = d3.min(chart.group().all(), function (kv) { return kv.key; }),
                            max = d3.max(chart.group().all(), function (kv) { return kv.key; });
                        max = d3.time.month.offset(max, 1);
                        chart.x().domain([min, max]);
                    }

                    barChartsegmento
                        .yAxisLabel((" " + unidadesChart))
                        .height(250)
                        .dimension(segmento)
                        .group(groupSegmento)
                        .x(d3.scale.ordinal())
                        .xUnits(dc.units.ordinal)
                        .elasticY(true)
                        .renderHorizontalGridLines(true)
                        .barPadding(0.1)
                        .margins({ top: 20, left: 50, right: 0, bottom: 80 })
                        .brushOn(false)
                        .clipPadding(20)
                        .title(function (d) { return ''; })
                        .renderLabel(true)
                        .label(function (d) {
                            return d3.format(',.0f')(d.y);
                        });
                    barChartsegmento.yAxis().tickFormat(d3.format('s'));

                    pieCharttipo_vivienda
                        .height(200)
                        .dimension(tipo_vivienda)
                        .group(groupTipoVivienda)
                        .innerRadius(50)
                        .legend(dc.legend().y(5))
                        .title(function (d) { return ''; });

                    rowChartsegmento_uma
                        .dimension(segmento_uma)
                        .group(groupSegmentoUMA)
                        .elasticX(true)
                        .margins({ top: 5, left: 5, right: 10, bottom: 40 })
                        /*.label(function (d) {
                            return d.key + ": " + d3.format(',.0f')(d.value);
                        })*/
                        .title(function (d) { return ''; });
                    rowChartsegmento_uma.xAxis().tickFormat(d3.format('s'));

                    pieChartPCU
                        .height(200)
                        .dimension(pcu)
                        .group(groupPCU)
                        .legend(dc.legend().y(5))
                        .title(function (d) { return ''; });
                    pieChartPCU.ordering(function (d) {
                        if (d.key === 'U1') return 0;
                        else if (d.key === 'U2') return 1;
                        else if (d.key === 'U3') return 2;
                        else if (d.key === 'FC') return 3;
                        else if (d.key === 'ND') return 4;
                    });

                    setStyleR();
                    dc.renderAll('registro');
                    AddXAxis(rowChartsegmento_uma, unidadesChart);
                });
            });

            function setStyleR() {
                var f = d3.format(',.0f');
                var pieTip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function (d) { return "<span class='label-tip'>" + d.data.key + "</span><br/>" + f(d.value) + (" " + unidadesChart) + ' (' + dc.utils.printSingleValue((d.endAngle - d.startAngle) / (2 * Math.PI) * 100) + '%)'; });
                var rowTip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function (d) { return "<span class='label-tip'>" + d.key + "</span><br/>" + f(d.value) + (" " + unidadesChart); });
                var barTip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function (d) { return "<span class='label-tip'>" + d.x + "</span><br/>" + f(d.y) + (" " + unidadesChart); });

                barChartsegmento.on('pretransition', function (chart) {
                    chart.selectAll("rect.bar").call(barTip).on('mouseover.tip', barTip.show).on('mouseout.tip', barTip.hide);
                });
                pieCharttipo_vivienda.on('pretransition', function (chart) {
                    chart.selectAll(".pie-slice").call(pieTip).on('mouseover.tip', pieTip.show).on('mouseout.tip', pieTip.hide);
                    chart.selectAll('text.pie-slice').text(function (d) {
                        return dc.utils.printSingleValue((d.endAngle - d.startAngle) / (2 * Math.PI) * 100) + '%';
                    });
                });
                rowChartsegmento_uma.on('pretransition', function (chart) {
                    chart.selectAll("g.row").call(rowTip).on('mouseover.tip', rowTip.show).on('mouseout.tip', rowTip.hide);
                });
                pieChartPCU.on('pretransition', function (chart) {
                    chart.selectAll(".pie-slice").call(pieTip).on('mouseover.tip', pieTip.show).on('mouseout.tip', pieTip.hide);
                    chart.selectAll('text.pie-slice').text(function (d) {
                        return dc.utils.printSingleValue((d.endAngle - d.startAngle) / (2 * Math.PI) * 100) + '%';
                    });
                });

                barChartsegmento.ordinalColors(baseColor);
                pieCharttipo_vivienda.ordinalColors(baseColor);
                rowChartsegmento_uma.ordinalColors(baseColor);
                pieChartPCU.ordinalColors(baseColor);
            }
        }

        //#endregion

        //#region Inventario

        async function mostrarMes() {
            anio = $('#ddl_inicio_inventario').val();
            var data = await $.getJSON(path + 'CatalogoAPI/GetMesInventario/' + anio, function (json) {
                $('#ddl_fin_inventario').empty();
                $.each(json, function (key, obj) {
                    $('#ddl_fin_inventario').append($('<option></option>').attr('value', obj.id).text(obj.descripcion));
                });
            });
            return data[0].id;
        }

        function initializeDashBoardI(anio_v,mes_v) {
            anio_inicio = (anio_v != undefined) ? anio_v : $('[id$=ddl_inicio_inventario]').val();
            mes = (mes_v != undefined) ? mes_v : $('[id$=ddl_fin_inventario]').val();

            mapEstado = dc.geoChoroplethChart('#mapEstadoInv', 'inventario');
            numberDisplayTotal = dc.numberDisplay('#numberDisplayTotalInv', 'inventario');
            barChartsegmento = dc.barChart('#barChartsegmentoInv', 'inventario');
            pieCharttipo_vivienda = dc.pieChart('#pieCharttipo_viviendaInv', 'inventario');
            rowChartsegmento_uma = dc.rowChart('#rowChartsegmento_umaInv', 'inventario');
            rowChartavance = dc.rowChart('#rowChartavance', 'inventario');

            d3.json(path + 'DashboardAPI/GetKPIsInventario2/' + anio_inicio + '/' + mes, function (error, counts) {
                var ndx = crossfilter(counts),
                    estado = ndx.dimension(function (d) { return d.estado; }),
                    groupEstado = estado.group().reduceSum(function (d) { return + d.viviendas; }),
                    total = ndx.groupAll().reduceSum(function (d) { return + d.viviendas; }),
                    avance = ndx.dimension(function (d) { return d.avance_obra; }),
                    groupAvance = avance.group().reduceSum(function (d) { return + d.viviendas; })
                segmento = ndx.dimension(function (d) { return d.segmento; }),
                    groupSegmento = segmento.group().reduceSum(function (d) { return + d.viviendas; }),
                    tipo_vivienda = ndx.dimension(function (d) { return d.tipo_vivienda; }),
                    groupTipoVivienda = tipo_vivienda.group().reduceSum(function (d) { return + d.viviendas; }),
                    segmento_uma = ndx.dimension(function (d) { return d.segmento_uma; }),
                    groupSegmentoUMA = segmento_uma.group().reduceSum(function (d) { return + d.viviendas; });

                d3.json('../js/maps/mx.json', function (jsonData) {
                    var projection = d3.geo.mercator()
                        .center(center_map)
                        .translate([width_map / 1.7, height_map / 1.7])
                        .scale([width_map / .6]);
                    var colorSchemeSelect = color_map;
                    var colorScheme = colorbrewer[colorSchemeSelect];
                    var quantiles = quantiles_map;
                    var estados = groupEstado.all();
                    var min = Math.min.apply(null, estados.map(x => x.value));
                    var max = Math.max.apply(null, estados.map(x => x.value));

                    mapEstado
                        .width(width_map)
                        .height(height_map)
                        .dimension(estado)
                        .group(groupEstado)
                        .projection(projection)
                        .overlayGeoJson(jsonData.features, 'name', function (d) {
                            return d.properties.name;
                        })
                        .colors(d3.scale.quantile().range(colorScheme[quantiles]))
                        .colorDomain([min, max])
                        .colorCalculator(function (d) {
                            return d ? mapEstado.colors()(d) : '#ccc';
                        })
                        .title(function (d) {
                            return d.key + ": " + d3.format(',.0f')(d.value) + (" " + unidadesChart);
                        });

                    numberDisplayTotal
                        .group(total)
                        .formatNumber(d3.format(',.0f'))
                        .valueAccessor(function (d) { return d; });

                    function calc_domain(chart) {
                        var min = d3.min(chart.group().all(), function (kv) { return kv.key; }),
                            max = d3.max(chart.group().all(), function (kv) { return kv.key; });
                        max = d3.time.month.offset(max, 1);
                        chart.x().domain([min, max]);
                    }

                    barChartsegmento
                        .yAxisLabel(" " + unidadesChart)
                        .height(250)
                        .dimension(segmento)
                        .group(groupSegmento)
                        .x(d3.scale.ordinal())
                        .xUnits(dc.units.ordinal)
                        .elasticY(true)
                        .renderHorizontalGridLines(true)
                        .barPadding(0.1)
                        .margins({ top: 20, left: 50, right: 0, bottom: 80 })
                        .brushOn(false)
                        .clipPadding(20)
                        .title(function (d) { return ''; })
                        .renderLabel(true)
                        .label(function (d) {
                            return d3.format(',.0f')(d.y);
                        });
                    barChartsegmento.yAxis().tickFormat(d3.format('s'));

                    pieCharttipo_vivienda
                        .height(200)
                        .dimension(tipo_vivienda)
                        .group(groupTipoVivienda)
                        .innerRadius(50)
                        .legend(dc.legend().y(5))
                        .title(function (d) { return ''; });

                    rowChartsegmento_uma
                        .dimension(segmento_uma)
                        .group(groupSegmentoUMA)
                        .elasticX(true)
                        .margins({ top: 5, left: 5, right: 10, bottom: 40 })
                        .ordering(function (d) { return d.key; })
                        /*.label(function (d) {
                            return d.key + ": " + d3.format(',.0f')(d.value);
                        })*/
                        .title(function (d) { return ''; });
                    rowChartsegmento_uma.xAxis().tickFormat(d3.format('s'));

                    rowChartavance
                        .dimension(avance)
                        .group(groupAvance)
                        .elasticX(true)
                        .margins({ top: 5, left: 5, right: 10, bottom: 40 })
                        .ordering(function (d) { return d.key; })
                        /*.label(function (d) {
                            return d.key + ": " + d3.format(',.0f')(d.value);
                        })*/
                        .title(function (d) { return ''; });
                    rowChartavance.xAxis().tickFormat(d3.format('s'));

                    setStyleI();
                    dc.renderAll('inventario');
                    AddXAxis(rowChartavance, unidadesChart);
                    AddXAxis(rowChartsegmento_uma, unidadesChart);
                });
            });

            function setStyleI() {
                var f = d3.format(',.0f');
                var pieTip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function (d) { return "<span class='label-tip'>" + d.data.key + "</span><br/>" + f(d.value) + (" " + unidadesChart) + ' (' + dc.utils.printSingleValue((d.endAngle - d.startAngle) / (2 * Math.PI) * 100) + '%)'; });
                var rowTip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function (d) { return "<span class='label-tip'>" + d.key + "</span><br/>" + f(d.value) + (" " + unidadesChart); });
                var barTip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function (d) { return "<span class='label-tip'>" + d.x + "</span><br/>" + f(d.y) + (" " + unidadesChart); });

                barChartsegmento.on('pretransition', function (chart) {
                    chart.selectAll("rect.bar").call(barTip).on('mouseover.tip', barTip.show).on('mouseout.tip', barTip.hide);
                });
                pieCharttipo_vivienda.on('pretransition', function (chart) {
                    chart.selectAll(".pie-slice").call(pieTip).on('mouseover.tip', pieTip.show).on('mouseout.tip', pieTip.hide);
                    chart.selectAll('text.pie-slice').text(function (d) {
                        return dc.utils.printSingleValue((d.endAngle - d.startAngle) / (2 * Math.PI) * 100) + '%';
                    });
                });
                rowChartsegmento_uma.on('pretransition', function (chart) {
                    chart.selectAll("g.row").call(rowTip).on('mouseover.tip', rowTip.show).on('mouseout.tip', rowTip.hide);
                });
                rowChartavance.on('pretransition', function (chart) {
                    chart.selectAll("g.row").call(rowTip).on('mouseover.tip', rowTip.show).on('mouseout.tip', rowTip.hide);
                });

                barChartsegmento.ordinalColors(baseColor);
                pieCharttipo_vivienda.ordinalColors(baseColor);
                rowChartsegmento_uma.ordinalColors(baseColor);
                rowChartavance.ordinalColors(baseColor);
            }
        }

        //#endregion
    </script>
}

<br />
<div id="tabs">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li id="tabI" role="presentation" class="tab-active"><a href="#lnk_i" aria-controls="lnk_i" role="tab" data-toggle="tab">Inventario de Vivienda</a></li>
        <li id="tabR" role="presentation"><a href="#lnk_r" aria-controls="lnk_r" role="tab" data-toggle="tab">Registro de Vivienda</a></li>
    </ul>
    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane" id="lnk_r">

            <div class="page-header">
                <h2>
                    Registro de Vivienda<small> @fechaRegistro</small>
                    <a href="javascript:dc.filterAll('registro'); dc.renderAll('registro');" title="Recargar" data-toggle="tooltip" data-placement="bottom"><span class="icon s7-refresh-2"></span></a>
                    <a href="/Cubo/Registro" title="Editar consulta"><span class="icon s7-edit" data-toggle="tooltip" data-placement="bottom" title="Editar consulta"></span></a>
                </h2>
            </div>

            <div id="div-form-registro" class="form-inline">
                <div class="form-group">
                    <label>Año:</label>
                    @Html.DropDownList("ddl_inicio", aniosRegistro, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label>a</label>
                    @Html.DropDownList("ddl_fin", aniosRegistro, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <button type="button" id="btn_aceptar" class="btn btn-default">Aceptar</button>
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <h3>Estado</h3>
                    <div id="mapEstado" class="geoChoroplethChart" style="overflow-x: auto"></div>
                </div>
                <div class="col-md-4 dv">
                    <h3>Total (viviendas)</h3>
                    <div id="numberDisplayTotal" class="number-acciones"></div>
                </div>
                <div class="col-md-4">
                    <h3>PCU</h3>
                    <div id="pieChartPCU" class="chart"></div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <h3>Segmento</h3>
                    <div id="barChartsegmento" class="chart"></div>
                </div>

                <div class="col-md-4">
                    <h3>Tipo de Vivienda</h3>
                    <div id="pieCharttipo_vivienda" class="chart"></div>
                </div>
                <div class="col-md-4">
                    <h3>Segmento UMA</h3>
                    <div id="rowChartsegmento_uma" class="chart"></div>
                </div>
            </div>

        </div>

        <div role="tabpanel" class="tab-pane active" id="lnk_i">

            <div class="page-header">
                <h2>
                    Inventario de Vivienda<small> @fechaInventario</small>
                    <a href="javascript:dc.filterAll('inventario'); dc.renderAll('inventario');" title="Recargar" data-toggle="tooltip" data-placement="bottom"><span class="icon s7-refresh-2"></span></a>
                    <a href="/Cubo/Inventario" title="Editar consulta"><span class="icon s7-edit" data-toggle="tooltip" data-placement="bottom" title="Editar consulta"></span></a>
                </h2>
            </div>

            <div id="div-form-inventario" class="form-inline">
                <div class="form-group">
                    <label>Año:</label>
                    @Html.DropDownList("ddl_inicio_inventario", aniosInventario, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label>a</label>
                    @Html.DropDownList("ddl_fin_inventario", mesesInventario, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <h3>Estado</h3>
                    <div id="mapEstadoInv" class="geoChoroplethChart" style="overflow-x: auto"></div>
                </div>
                <div class="col-md-4 dv">
                    <h3>Total (viviendas)</h3>
                    <div id="numberDisplayTotalInv" class="number-acciones"></div>
                </div>
                <div class="col-md-4">
                    <h3>Segmento</h3>
                    <div id="barChartsegmentoInv" class="chart"></div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <h3>Avance de Obra</h3>
                    <div id="rowChartavance" class="chart"></div>
                </div>
                <div class="col-md-4">
                    <h3>Tipo de Vivienda</h3>
                    <div id="pieCharttipo_viviendaInv" class="chart"></div>
                </div>
                <div class="col-md-4">
                    <h3>Segmento UMA</h3>
                    <div id="rowChartsegmento_umaInv" class="chart"></div>
                </div>
            </div>

        </div>
    </div>
</div>