@{
    ViewData["Title"] = "Rezago estatal";
    List<SelectListItem> anios = (List<SelectListItem>)ViewBag.anios;
}

@section Scripts{
    @* DataTables *@
    <link href="~/js/datatable2/datatables.min.css" rel="stylesheet" type="text/css" />
    <script src="~/js/datatable2/datatables.min.js" type="text/javascript"></script>

    @* ECharts *@
    <link href="~/css/echarts.css" rel="stylesheet" type="text/css" />
    <script src="~/js/echarts/echarts.js" type="text/javascript"></script>

    <script src="~/js/util.js" type="text/javascript"></script>
    <script src="~/js/data.js" type="text/javascript"></script>
    <script type="text/javascript">
        function changeChartMap(clave_estado) {
            var anio = $('[id$=ddl_anio]').val();
            $.getJSON(path + 'DemandaAPI/GetTotalRezagoEstatal/' + anio + '/' + clave_estado, function (json) {
                showChartMap(json);
            });
            $.getJSON(path + 'DemandaAPI/GetRezagoEstatal/' + anio, function (json) {
                var dataMap = json.map(x => ({ id: x.id_estado, name: x.estado, value: x.con_rezago, selected: false }));
                showMap(dataMap, json, clave_estado);
            });
        }

        $(function () {
            $('[id$=ddl_anio]').change(function () {
                createHousingRenaret();
            });
            createHousingRenaret();
        });

        function createHousingRenaret() {
            var anio = $('[id$=ddl_anio]').val();
            $.getJSON(path + 'DemandaAPI/GetRezagoEstatal/' + anio, function (data) {
                var columns = [
                    {
                        'data': 'estado',
                        'render': function (data, type, row) {
                            if (type === 'display') {
                                data = '<a id="' + row.id_estado + '"  href="#"  onclick="changeChartMap(\'' + row.id_estado + '\');">' + data + '</a>';
                            }
                            return data;
                        }
                    },
                    { 'data': 'con_rezago', render: function (data, type, row) { return addCommas(data); } },
                    { 'data': 'sin_rezago', render: function (data, type, row) { return addCommas(data); } },
                    { 'data': 'total', render: function (data, type, row) { return addCommas(data); } }

                ];
                var dataMap = data.map(x => ({ id: x.id_estado, name: x.estado, value: x.con_rezago }));
                var clave_estado = '00';
                showTable(data, columns);
                showMap(dataMap, data, clave_estado);
                showChart(data);
            });
        }
        function showTable(data, columns) {
            var table = $('#table').DataTable({
                data: data,
                columns: columns,
                destroy: true,
                scrollY: '770px',
                scrollCollapse: true,
                paging: false,
                info: false,
                buttons: buttons,
                scrollX: true,
                footerCallback: function (row, data, start, end, display) {
                    var api = this.api();
                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
                    };
                    // Total over all pages
                    total1 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    total2 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    total3 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    // Update footer
                    $(api.column(1).footer()).html(addCommas(total1));
                    $(api.column(2).footer()).html(addCommas(total2));
                    $(api.column(3).footer()).html(addCommas(total3));
                }
            });
            table.buttons().container().appendTo($('.col-sm-6:eq(0)', table.table().container()));
        }
        function showMap(dataMap, data, clave_estado) {
            for (var i = 0; i < dataMap.length; i++) {
                if (dataMap[i].id == clave_estado) {
                    dataMap[i].selected = true;
                }
            }
            var nacional = data
            var anio = $('[id$=ddl_anio]').val();
            var min = Math.min.apply(null, dataMap.map(x => x.value));
            var max = Math.max.apply(null, dataMap.map(x => x.value));
            $.get('../js/maps/' + clave_nacional + '.json', function (mxJson) {
                echarts.registerMap('mx', mxJson);
                var map = echarts.init($('#map')[0]);
                map.setOption({
                    tooltip: tooltip,
                    selectedMode: 'single',
                    visualMap: {
                        min: min,
                        max: max,
                        left: 'left',
                        top: 'bottom',
                        text: ['max', 'min'],
                        inRange: {
                            color: rangeColor
                        },
                        calculable: true
                    },
                    toolbox: toolbox,
                    series: [{
                        name: clave_nacional,
                        type: 'map',
                        map: 'mx',
                        aspectScale: 1.0,
                        label: {
                            emphasis: {
                                show: false
                            }
                        },
                        itemStyle: {
                            emphasis: {
                                areaColor: '#f7aa43',

                            }
                        },
                        data: dataMap
                    }]
                });
                map.on('click', function (params) {
                    if (params.data.selected) {
                        var clave_estado = params.data.id;
                        var nombre_estado = params.data.name;
                        $.getJSON(path + 'DemandaAPI/GetTotalRezagoEstatal/' + anio + '/' + clave_estado, function (json) {
                            showChartMap(json);
                        });
                    } else {
                        showChart(nacional);

                    }
                });
                //Responsive
                $(window).on('resize', function () {
                    map.resize();
                });
            });
        }
        function showChart(data) {
            //Crear objetos dinamicos var obj = JSON.parse(text);
            var legend1 = 'Con Rezago';
            var con_rezago = { 'name': legend1, 'value': data.map(function (x) { return x.con_rezago; }).sum() }
            var legend2 = 'Sin Rezago';
            var sin_rezago = { 'name': legend2, 'value': data.map(function (x) { return x.sin_rezago; }).sum() }
            var chart = echarts.init($('#chart')[0]);
            chart.setOption({
                color: baseColor,
                toolbox: toolbox2,
                tooltip: tooltip2,
                legend: {
                    orient: 'horizontal',
                    left: 0,
                    bottom: 0,
                    data: [con_rezago.name, sin_rezago.name]
                },
                title: {
                    text: 'Nacional',
                    x: 'center'
                },

                series: [
                    {
                        name: 'Rezago Estatal',
                        type: 'pie',
                        selectedMode: 'single',
                        center: ['50%', '50%'],
                        label: {
                            normal: {
                                formatter: '{d}%',
                                position: 'inner'
                            }
                        },

                        data: [con_rezago, sin_rezago]

                    }
                ]

            });
            //Responsive
            $(window).on('resize', function () {
                chart.resize();
            });
        }
        function showChartMap(data) {
            //Crear objetos dinamicos var obj = JSON.parse(text);
            var legend1 = 'Con Rezago';
            var con_rezago = { 'name': legend1, 'value': data.con_rezago }
            var legend2 = 'Sin Rezago';
            var sin_rezago = { 'name': legend2, 'value': data.sin_rezago }
            var chart = echarts.init($('#chart')[0]);
            chart.setOption({
                color: baseColor,
                toolbox: toolbox2,
                tooltip: tooltip2,
                legend: {
                    orient: 'horizontal',
                    left: 0,
                    bottom: 0,
                    data: [con_rezago.name, sin_rezago.name]
                },
                title: {
                    text: 'Estado de ' + data.estado,
                    x: 'center'
                },
                series: [
                    {
                        name: 'Rezago Estatal',
                        type: 'pie',
                        center: ['50%', '50%'],
                        label: {
                            normal: {
                                formatter: '{d}%',
                                position: 'inner'
                            }
                        },
                        data: [con_rezago, sin_rezago]
                    }
                ]
            });
            //Responsive
            $(window).on('resize', function () {
                chart.resize();
            });
        }
    </script>
}

<div class="page-header">
    <h2>Rezago estatal<small> Número de viviendas</small></h2>
</div>

<div id="div-form" class="form-inline">
    <div class="form-group">
        <label>Año:</label>
        @Html.DropDownList("ddl_anio", anios, new { @class = "form-control" })
    </div>
</div>

<div class="row">
    <div class="col-md-5">
        <div id="map"></div>
        <br />
        <div id="chart"></div>
    </div>
    <div class="col-md-7">
        <table id="table" class="table table-striped table-hover" style="width: 100%">
            <thead>
                <tr>
                    <th>Estado</th>
                    <th>con Rezago</th>
                    <th>Sin Rezago</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tfoot>
                <tr>
                    <th>Total</th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<br />
<div id="info" class="row">
    <div class="col-md-12">
        <div class="panel-group" role="tablist">
            <div class="panel panel-info">
                <div class="panel-heading" role="tab" id="collapseListGroupHeading1">
                    <h4 class="panel-title">
                        <a href="#collapseListGroup1" class="" role="button" data-toggle="collapse" aria-expanded="true" aria-controls="collapseListGroup1">
                            <span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span> Notas
                        </a>
                    </h4>
                </div>
                <div class="panel-collapse collapse in" role="tabpanel" id="collapseListGroup1" aria-labelledby="collapseListGroupHeading1" aria-expanded="true" style="">
                    <ul id="notes" class="list-group">
                        <li class="list-group-item"><strong>Con rezago: </strong>Incluye viviendas con materiales constructivos en deterioro, regulares y/o con precariedad en espacios</li>
                        <li class="list-group-item"><strong>Precariedad en espacios: </strong>Viviendas con hacinamiento, definido como aquellas viviendas en donde la relación (número de residentes) / (número de cuartos) es mayor a 2.5; además se considera una vivienda precaria en espacios, si no cuenta con excusado</li>
                        <li class="list-group-item"><strong>Materiales deteriorados: </strong>Viviendas construidas con paredes de material de desecho, lámina de cartón, carrizo, bambú, palma, embarro o bajareque; también se incluyen en esta categoría viviendas construidas con techo con material de desecho, lámina de cartón, palma o paja</li>
                        <li class="list-group-item"><strong>Materiales regulares: </strong>Viviendas construidas con paredes de lámina metálica, de asbesto, o de madera; viviendas construidas con techo de lámina metálica o de asbesto, madera, tejamanil o teja; además de viviendas con piso de tierra</li>
                        <li class="list-group-item">Le recomendamos revisar también el cálculo de la <a href="https://sistemas.sedatu.gob.mx/repositorio/proxy/alfresco-noauth/api/internal/shared/node/avMXRuMtQse3C9jMO8JKxw/content/Rezago_Habitacional.pdf?a=true" target="_blank" title="Metodología de Rezago Habitacional">Metodología del Rezago Habitacional 2020</a> de la CONAVI</li>
                        <li id="li_estatal" class="list-group-item">Fuente: <strong>INEGI</strong></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>