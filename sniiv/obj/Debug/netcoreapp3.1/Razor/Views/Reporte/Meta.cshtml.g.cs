#pragma checksum "E:\Azure\sniiv\Views\Reporte\Meta.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bd96c4abf625f2c8a24ab7377b03876bd07c1264"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Reporte_Meta), @"mvc.1.0.view", @"/Views/Reporte/Meta.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\Azure\sniiv\Views\_ViewImports.cshtml"
using sniiv;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Azure\sniiv\Views\_ViewImports.cshtml"
using sniiv.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Azure\sniiv\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bd96c4abf625f2c8a24ab7377b03876bd07c1264", @"/Views/Reporte/Meta.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"caf6fc7e17390637ee7a4d1b16d5f6a3a119c2e3", @"/Views/_ViewImports.cshtml")]
    public class Views_Reporte_Meta : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/util.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/functions.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/echarts.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/echarts/echarts-all-3.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/linq.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dc/d3.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/datatable2/datatables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\Azure\sniiv\Views\Reporte\Meta.cshtml"
  
    ViewData["Title"] = "Metas";
    List<SelectListItem> anios_conavi = (List<SelectListItem>)ViewBag.anios_conavi;
    List<SelectListItem> anios_fovissste = (List<SelectListItem>)ViewBag.anios_fovissste;
    List<SelectListItem> anios_infonavit = (List<SelectListItem>)ViewBag.anios_infonavit;

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bd96c4abf625f2c8a24ab7377b03876bd07c12647197", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bd96c4abf625f2c8a24ab7377b03876bd07c12648381", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <!-- ECharts -->\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "bd96c4abf625f2c8a24ab7377b03876bd07c12649587", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bd96c4abf625f2c8a24ab7377b03876bd07c126410850", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <!-- LINQ -->\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bd96c4abf625f2c8a24ab7377b03876bd07c126412054", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <!-- DC -->\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bd96c4abf625f2c8a24ab7377b03876bd07c126413256", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <!-- DataTables -->\n    <link href=\"/js/datatable2/datatables.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bd96c4abf625f2c8a24ab7377b03876bd07c126414560", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">
        var countC, countF, countI;
        var format_acciones = ',.0f';
        var format_monto = ',.2f';
        $(function () {
            countC = 0;
            countF = 0;
            countI = 0;

            $('#tabC a').click(function (e) {
                e.preventDefault();
                if (countC < 1)
                    iniciarConavi();
                countC++;
            });
            $('#tabF a').click(function (e) {
                e.preventDefault();
                if (countF < 1)
                    iniciarFovissste();
                countF++;
            });
            $('#tabI a').click(function (e) {
                e.preventDefault();
                if (countI < 1)
                    iniciarInfonavit();
                countI++;
            });

            $('[id$=ddl_anio_c]').change(function () {
                iniciarConavi();
            });
            $('[id$=ddl_anio_f]').change(function () {
                iniciarFovissste();
");
                WriteLiteral(@"            });
            $('[id$=ddl_anio_i]').change(function () {
                iniciarInfonavit();
            });

            $('.tab-active').addClass('active');
            $('#tabC a').click();
        });

        var jsonC, jsonF, jsonI, metrica, isMonto, anio,
            barChartConavi,
            gaugeChartConavi,
            barChartFovissste,
            gaugeChartFovissste,
            barChartInfonavit,
            gaugeChartInfonavit,
            lst,
            meses,
            estados = [],
            series,
            sum_col,
            arrayPorcentaje = [],
            arrayValor = [],
            avance, meta, porcentaje;
        var toolbox = {
            show: true,
            orient: 'vertical',
            left: 'right',
            top: 'center',
            showTitle: false,
            feature: {
                restore: { show: true },
                saveAsImage: { show: true }
            }
        };
        var columns, columnsHidden;

        //#region CONAV");
                WriteLiteral(@"I

        function iniciarConavi() {
            barChartConavi = echarts.init($('#barChartConavi')[0]);
            gaugeChartConavi = echarts.init($('#gaugeChartConavi')[0]);

            anio = $('[id$=ddl_anio_c]').val();
            $('#lbl_c').text(anio);
            $.get(path + 'DashboardAPI/getMetasConavi/' + anio).done(function (obj) {
                jsonC = obj;
                mostrarConavi();
            });
        }

        function mostrarConavi() {
            metrica = $(""input:radio[name='chk_metrica_c']:checked"").val();
            isMonto = metrica === 'monto' ? true : false;

            lst = Enumerable.From(jsonC).OrderBy(""$.clave_estado"");
            estados = lst.Select(p => p.estado).ToArray();
            console.log(estados);
            series = [];
            columns = [];
            columnsHidden = [];
            avance = 0;
            columns.push({ data: 'estado' });
            meses = ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic");
                WriteLiteral(@"'];
            $.each(meses, function (index, value) {
                sum_col = isMonto ? lst.Select('p => p.' + value + '_monto').ToArray().reduce((a, b) => a + b, 0) : lst.Select('p => p.' + value + '_acciones').ToArray().reduce((a, b) => a + b, 0);
                if (sum_col != 0) {
                    arrayPorcentaje = isMonto ? lst.Select('p => p.' + value + '_monto').ToArray() : lst.Select('p => p.' + value + '_acciones').ToArray();
                    arrayValor = isMonto ? lst.Select('p => p.' + value + 'Monto').ToArray() : lst.Select('p => p.' + value + 'Acciones').ToArray();
                    series.push({
                        name: value,
                        type: 'bar',
                        stack: 'meta',
                        data: arrayPorcentaje
                    });
                    avance += arrayValor.reduce((a, b) => a + b, 0);
                }
                else {
                    columnsHidden.push({
                        targets: [index + 1],
               ");
                WriteLiteral(@"         visible: false,
                        searchable: false
                    });
                }
                columns.push({ data: value + (isMonto ? 'Monto' : 'Acciones'), render: function (data) { return d3.format(isMonto ? format_monto : format_acciones)(data); } });
            });
            series.push({
                name: 'pendiente',
                type: 'bar',
                itemStyle: {
                    normal: { shadowColor: 'rgba(0, 0, 0, 0.5)', shadowBlur: 10 }
                },
                stack: 'meta',
                data: isMonto ? lst.Select(p => p.restante_monto).ToArray() : lst.Select(p => p.restante_acciones).ToArray(),
                label: {
                    normal: { show: true, position: 'insideRight', formatter: '{c}%' }
                }
            });
            columns.push({ data: (isMonto ? 'total_monto' : 'total_acciones'), render: function (data) { return d3.format(isMonto ? format_monto : format_acciones)(data); } });
            meta = isM");
                WriteLiteral(@"onto ? lst.Select(p => p.total_monto).ToArray().reduce((a, b) => a + b, 0) : lst.Select(p => p.total_acciones).ToArray().reduce((a, b) => a + b, 0);
            porcentaje = ((avance * 100) / meta).toFixed(2);
            $('#lbl_avance_c').text((isMonto ? '$' : '') + addCommas(avance.toFixed(0)) + ' / ' + (isMonto ? '$' : '') + addCommas(meta.toFixed(0)));

            gaugeChartConavi.setOption({
                tooltip: {
                    formatter: ""{a} <br/>{b} : {c}%""
                },
                toolbox: toolbox,
                series: [
                    {
                        name: (isMonto ? 'Monto' : 'Acciones'),
                        type: 'gauge',
                        detail: { formatter: '{value}%' },
                        axisLine: {
                            lineStyle: {
                                color: [[0.2, '#BB1B3D'], [0.8, '#EAB25B'], [1, '#497866']]
                            }
                        },
                        data: [{ value: porcentaje, n");
                WriteLiteral(@"ame: 'Avance' }]
                    }
                ]
            }, true);

            meses.push('pendiente');
            barChartConavi.setOption({
                color: baseColor,
                tooltip: { formatter: '{a}<br />{b}: {c}%' },
                toolbox: toolbox,
                legend: {
                    data: meses
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type: 'value',
                    axisLabel: {
                        formatter: '{value} %'
                    },
                    max: 100,
                },
                yAxis: {
                    type: 'category',
                    inverse: true,
                    data: estados
                },
                series: series
            }, true);

            renderChartsConavi();
            showTableConavi(l");
                WriteLiteral(@"st.ToArray(), columns, columnsHidden);
        }

        function showTableConavi(data, cols, colsHidden) {
            var table = $('#tableC').DataTable({
                data: data,
                columns: cols,
                columnDefs: colsHidden,
                destroy: true,
                paging: false,
                ordering: false,
                info: false,
                buttons: ['excel']
            });
            table.buttons().container().appendTo($('.col-sm-6:eq(0)', table.table().container()));
        }

        function renderChartsConavi() {
            barChartConavi.resize();
            gaugeChartConavi.resize();
        }

        //#endregion

        //#region FOVISSSTE

        function iniciarFovissste() {
            barChartFovissste = echarts.init($('#barChartFovissste')[0]);
            gaugeChartFovissste = echarts.init($('#gaugeChartFovissste')[0]);

            anio = $('[id$=ddl_anio_f]').val();
            $('#lbl_f').text(anio);
            $.get(path + 'Das");
                WriteLiteral(@"hboardAPI/getMetasFovissste/' + anio).done(function (obj) {
                jsonF = obj;
                mostrarFovissste();
            });
        }

        function mostrarFovissste() {
            metrica = $(""input:radio[name='chk_metrica_f']:checked"").val();
            isMonto = metrica === 'monto' ? true : false;

            lst = Enumerable.From(jsonF).OrderBy(""$.clave_estado"");
            estados = lst.Select(p => p.estado).ToArray();
            series = [];
            columns = [];
            columnsHidden = [];
            avance = 0;
            columns.push({ data: 'estado' });
            meses = ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'];
            $.each(meses, function (index, value) {
                sum_col = isMonto ? lst.Select('p => p.' + value + '_monto').ToArray().reduce((a, b) => a + b, 0) : lst.Select('p => p.' + value + '_acciones').ToArray().reduce((a, b) => a + b, 0);
                if (sum_col != 0) {
                    arrayPo");
                WriteLiteral(@"rcentaje = isMonto ? lst.Select('p => p.' + value + '_monto').ToArray() : lst.Select('p => p.' + value + '_acciones').ToArray();
                    arrayValor = isMonto ? lst.Select('p => p.' + value + 'Monto').ToArray() : lst.Select('p => p.' + value + 'Acciones').ToArray();
                    series.push({
                        name: value,
                        type: 'bar',
                        stack: 'meta',
                        data: arrayPorcentaje
                    });
                    avance += arrayValor.reduce((a, b) => a + b, 0);
                }
                else {
                    columnsHidden.push({
                        targets: [index + 1],
                        visible: false,
                        searchable: false
                    });
                }
                columns.push({ data: value + (isMonto ? 'Monto' : 'Acciones'), render: function (data) { return d3.format(isMonto ? format_monto : format_acciones)(data); } });
            });
            ser");
                WriteLiteral(@"ies.push({
                name: 'pendiente',
                type: 'bar',
                itemStyle: {
                    normal: { shadowColor: 'rgba(0, 0, 0, 0.5)', shadowBlur: 10 }
                },
                stack: 'meta',
                data: isMonto ? lst.Select(p => p.restante_monto).ToArray() : lst.Select(p => p.restante_acciones).ToArray(),
                label: {
                    normal: { show: true, position: 'insideRight', formatter: '{c}%' }
                }
            });
            columns.push({ data: (isMonto ? 'total_monto' : 'total_acciones'), render: function (data) { return d3.format(isMonto ? format_monto : format_acciones)(data); } });
            meta = isMonto ? lst.Select(p => p.total_monto).ToArray().reduce((a, b) => a + b, 0) : lst.Select(p => p.total_acciones).ToArray().reduce((a, b) => a + b, 0);
            porcentaje = ((avance * 100) / meta).toFixed(2);
            $('#lbl_avance_f').text((isMonto ? '$' : '') + addCommas(avance.toFixed(0)) + ' / ' + (isMonto ");
                WriteLiteral(@"? '$' : '') + addCommas(meta.toFixed(0)));

            gaugeChartFovissste.setOption({
                tooltip: {
                    formatter: ""{a} <br/>{b} : {c}%""
                },
                toolbox: toolbox,
                series: [
                    {
                        name: (isMonto ? 'Monto' : 'Acciones'),
                        type: 'gauge',
                        detail: { formatter: '{value}%' },
                        axisLine: {
                            lineStyle: {
                                color: [[0.2, '#BB1B3D'], [0.8, '#EAB25B'], [1, '#497866']]
                            }
                        },
                        data: [{ value: porcentaje, name: 'Avance' }]
                    }
                ]
            }, true);

            meses.push('pendiente');
            barChartFovissste.setOption({
                color: baseColor,
                tooltip: { formatter: '{a}<br />{b}: {c}%' },
                toolbox: toolbox,
                legend: {");
                WriteLiteral(@"
                    data: meses
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type: 'value',
                    axisLabel: {
                        formatter: '{value} %'
                    },
                    max: 100,
                },
                yAxis: {
                    type: 'category',
                    inverse: true,
                    data: estados
                },
                series: series
            }, true);

            renderChartsFovissste();
            showTableFovissste(lst.ToArray(), columns, columnsHidden);
        }

        function showTableFovissste(data, cols, colsHidden) {
            var table = $('#tableF').DataTable({
                data: data,
                columns: cols,
                columnDefs: colsHidden,
                destroy: true,
              ");
                WriteLiteral(@"  paging: false,
                ordering: false,
                info: false,
                buttons: ['excel']
            });
            table.buttons().container().appendTo($('.col-sm-6:eq(0)', table.table().container()));
        }

        function renderChartsFovissste() {
            barChartFovissste.resize();
            gaugeChartFovissste.resize();
        }

        //#endregion

        //#region INFONAVIT

        function iniciarInfonavit() {
            barChartInfonavit = echarts.init($('#barChartInfonavit')[0]);
            gaugeChartInfonavit = echarts.init($('#gaugeChartInfonavit')[0]);

            anio = $('[id$=ddl_anio_i]').val();
            $('#lbl_i').text(anio);
            $.get(path + 'DashboardAPI/getMetasInfonavit/' + anio).done(function (obj) {
                jsonI = obj;
                mostrarInfonavit();
            });
        }

        function mostrarInfonavit() {
            metrica = $(""input:radio[name='chk_metrica_i']:checked"").val();
            isMonto = metri");
                WriteLiteral(@"ca === 'monto' ? true : false;

            lst = Enumerable.From(jsonI).OrderBy(""$.clave_estado"");
            estados = lst.Select(p => p.estado).ToArray();
            series = [];
            columns = [];
            columnsHidden = [];
            avance = 0;
            columns.push({ data: 'estado' });
            meses = ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'];
            $.each(meses, function (index, value) {
                sum_col = isMonto ? lst.Select('p => p.' + value + '_monto').ToArray().reduce((a, b) => a + b, 0) : lst.Select('p => p.' + value + '_acciones').ToArray().reduce((a, b) => a + b, 0);
                if (sum_col != 0) {
                    arrayPorcentaje = isMonto ? lst.Select('p => p.' + value + '_monto').ToArray() : lst.Select('p => p.' + value + '_acciones').ToArray();
                    arrayValor = isMonto ? lst.Select('p => p.' + value + 'Monto').ToArray() : lst.Select('p => p.' + value + 'Acciones').ToArray();
               ");
                WriteLiteral(@"     series.push({
                        name: value,
                        type: 'bar',
                        stack: 'meta',
                        data: arrayPorcentaje
                    });
                    avance += arrayValor.reduce((a, b) => a + b, 0);
                }
                else {
                    columnsHidden.push({
                        targets: [index + 1],
                        visible: false,
                        searchable: false
                    });
                }
                columns.push({ data: value + (isMonto ? 'Monto' : 'Acciones'), render: function (data) { return d3.format(isMonto ? format_monto : format_acciones)(data); } });
            });
            series.push({
                name: 'pendiente',
                type: 'bar',
                itemStyle: {
                    normal: { shadowColor: 'rgba(0, 0, 0, 0.5)', shadowBlur: 10 }
                },
                stack: 'meta',
                data: isMonto ? lst.Select(p => p.restant");
                WriteLiteral(@"e_monto).ToArray() : lst.Select(p => p.restante_acciones).ToArray(),
                label: {
                    normal: { show: true, position: 'insideRight', formatter: '{c}%' }
                }
            });
            columns.push({ data: (isMonto ? 'total_monto' : 'total_acciones'), render: function (data) { return d3.format(isMonto ? format_monto : format_acciones)(data); } });
            meta = isMonto ? lst.Select(p => p.total_monto).ToArray().reduce((a, b) => a + b, 0) : lst.Select(p => p.total_acciones).ToArray().reduce((a, b) => a + b, 0);
            porcentaje = ((avance * 100) / meta).toFixed(2);
            $('#lbl_avance_i').text((isMonto ? '$' : '') + addCommas(avance.toFixed(0)) + ' / ' + (isMonto ? '$' : '') + addCommas(meta.toFixed(0)));

            gaugeChartInfonavit.setOption({
                tooltip: {
                    formatter: ""{a} <br/>{b} : {c}%""
                },
                toolbox: toolbox,
                series: [
                    {
                        ");
                WriteLiteral(@"name: (isMonto ? 'Monto' : 'Acciones'),
                        type: 'gauge',
                        detail: { formatter: '{value}%' },
                        axisLine: {
                            lineStyle: {
                                color: [[0.2, '#BB1B3D'], [0.8, '#EAB25B'], [1, '#497866']]
                            }
                        },
                        data: [{ value: porcentaje, name: 'Avance' }]
                    }
                ]
            }, true);

            meses.push('pendiente');
            barChartInfonavit.setOption({
                color: baseColor,
                tooltip: { formatter: '{a}<br />{b}: {c}%' },
                toolbox: toolbox,
                legend: {
                    data: meses
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type: 'value',
");
                WriteLiteral(@"                    axisLabel: {
                        formatter: '{value} %'
                    },
                    max: 100,
                },
                yAxis: {
                    type: 'category',
                    inverse: true,
                    data: estados
                },
                series: series
            }, true);

            renderChartsInfonavit();
            showTableInfonavit(lst.ToArray(), columns, columnsHidden);
        }

        function showTableInfonavit(data, cols, colsHidden) {
            var table = $('#tableI').DataTable({
                data: data,
                columns: cols,
                columnDefs: colsHidden,
                destroy: true,
                paging: false,
                ordering: false,
                info: false,
                buttons: ['excel']
            });
            table.buttons().container().appendTo($('.col-sm-6:eq(0)', table.table().container()));
        }

        function renderChartsInfonavit() {
          ");
                WriteLiteral("  barChartInfonavit.resize();\n            gaugeChartInfonavit.resize();\n        }\n\n        //#endregion\n    </script>\n");
            }
            );
            WriteLiteral(@"
<br />
<div id=""tabs"">
    <!-- Nav tabs -->
    <ul class=""nav nav-tabs"" role=""tablist"">
        <li id=""tabC"" role=""presentation"" class=""tab-active""><a href=""#lnk_c"" aria-controls=""lnk_c"" role=""tab"" data-toggle=""tab"">CONAVI</a></li>
        <li id=""tabF"" role=""presentation""><a href=""#lnk_f"" aria-controls=""lnk_f"" role=""tab"" data-toggle=""tab"">FOVISSSTE</a></li>
        <li id=""tabI"" role=""presentation""><a href=""#lnk_i"" aria-controls=""lnk_i"" role=""tab"" data-toggle=""tab"">INFONAVIT</a></li>
    </ul>
    <!-- Tab panes -->
    <div class=""tab-content"">
        <div role=""tabpanel"" class=""tab-pane active"" id=""lnk_c"">
            <div class=""page-header"">
                <h2>CONAVI <small>Avance mensual con respecto a la meta <span id=""lbl_c""></span></small></h2>
            </div>

            <div class=""row"">
                <div class=""col-md-4"">
                    <h3>Total</h3>
                    <div id=""gaugeChartConavi"" class=""chart""></div>
                    <div align=""center"">
                     ");
            WriteLiteral(@"   <h4><strong><span id=""lbl_avance_c""></span></strong></h4>
                    </div>
                    <br />
                    <div class=""btn-group btn-group-justified"" data-toggle=""buttons"">
                        <label class=""btn btn-default active"">
                            <input type=""radio"" name=""chk_metrica_c"" value=""acciones"" autocomplete=""off"" onchange=""mostrarConavi()"" checked>
                            Acciones
                        </label>
                        <label class=""btn btn-default"">
                            <input type=""radio"" name=""chk_metrica_c"" value=""monto"" autocomplete=""off"" onchange=""mostrarConavi()"">
                            Monto
                        </label>
                    </div>
                    <br />
                    <div class=""form-group"">
                        ");
#nullable restore
#line 547 "E:\Azure\sniiv\Views\Reporte\Meta.cshtml"
                   Write(Html.DropDownList("ddl_anio_c", anios_conavi, new { @class = "form-control" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                    </div>
                </div>
                <div class=""col-md-8"">
                    <h3>Estado</h3>
                    <div id=""barChartConavi"" class=""chart3""></div>
                </div>
            </div>

            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""table-responsive"">
                        <table id=""tableC"" class=""table table-condensed table-bordered table-hover"" style=""width: 100%"">
                            <thead>
                                <tr>
                                    <th>Estado</th>
                                    <th>Enero</th>
                                    <th>Febrero</th>
                                    <th>Marzo</th>
                                    <th>Abril</th>
                                    <th>Mayo</th>
                                    <th>Junio</th>
                                    <th>Julio</th>
                                    <th>Agosto</th>
           ");
            WriteLiteral(@"                         <th>Septiembre</th>
                                    <th>Octubre</th>
                                    <th>Noviembre</th>
                                    <th>Diciembre</th>
                                    <th>Meta</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

            <div id=""info"" class=""row"">
                <div class=""col-md-12"">
                    <div class=""panel-group"" role=""tablist"">
                        <div class=""panel panel-info"">
                            <div class=""panel-heading"" role=""tab"" id=""collapseListGroupHeading1"">
                                <h4 class=""panel-title"">
                                    <a href=""#collapseListGroup1""");
            BeginWriteAttribute("class", " class=\"", 24396, "\"", 24404, 0);
            EndWriteAttribute();
            WriteLiteral(@" role=""button"" data-toggle=""collapse"" aria-expanded=""true"" aria-controls=""collapseListGroup1"">
                                        <span class=""glyphicon glyphicon-info-sign"" aria-hidden=""true""></span>Notas
                                    </a>
                                </h4>
                            </div>
                            <div class=""panel-collapse collapse in"" role=""tabpanel"" id=""collapseListGroup1"" aria-labelledby=""collapseListGroupHeading1"" aria-expanded=""true""");
            BeginWriteAttribute("style", " style=\"", 24902, "\"", 24910, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                                <ul id=""notes"" class=""list-group"">
                                    <li class=""list-group-item"">
                                        <p class=""text-info"">Se incluyen todos los programas CONAVI</p>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div role=""tabpanel"" class=""tab-pane"" id=""lnk_f"">
            <div class=""page-header"">
                <h2>FOVISSSTE <small>Avance mensual con respecto a la meta <span id=""lbl_f""></span></small></h2>
            </div>

            <div class=""row"">
                <div class=""col-md-4"">
                    <h3>Total</h3>
                    <div id=""gaugeChartFovissste"" class=""chart""></div>
                    <div align=""center"">
                        <h4><strong><span id=""lbl_avance_f""></span></strong></h4>
                    </div>
 ");
            WriteLiteral(@"                   <br />
                    <div class=""btn-group btn-group-justified"" data-toggle=""buttons"">
                        <label class=""btn btn-default active"">
                            <input type=""radio"" name=""chk_metrica_f"" value=""acciones"" autocomplete=""off"" onchange=""mostrarFovissste()"" checked>
                            Acciones
                        </label>
                        <label class=""btn btn-default"">
                            <input type=""radio"" name=""chk_metrica_f"" value=""monto"" autocomplete=""off"" onchange=""mostrarFovissste()"">
                            Monto
                        </label>
                    </div>
                    <br />
                    <div class=""form-group"">
                        ");
#nullable restore
#line 632 "E:\Azure\sniiv\Views\Reporte\Meta.cshtml"
                   Write(Html.DropDownList("ddl_anio_f", anios_fovissste, new { @class = "form-control" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                    </div>
                </div>
                <div class=""col-md-8"">
                    <h3>Estado</h3>
                    <div id=""barChartFovissste"" class=""chart3""></div>
                </div>
            </div>

            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""table-responsive"">
                        <table id=""tableF"" class=""table table-condensed table-bordered table-hover"" style=""width: 100%"">
                            <thead>
                                <tr>
                                    <th>Estado</th>
                                    <th>Enero</th>
                                    <th>Febrero</th>
                                    <th>Marzo</th>
                                    <th>Abril</th>
                                    <th>Mayo</th>
                                    <th>Junio</th>
                                    <th>Julio</th>
                                    <th>Agosto</th>
        ");
            WriteLiteral(@"                            <th>Septiembre</th>
                                    <th>Octubre</th>
                                    <th>Noviembre</th>
                                    <th>Diciembre</th>
                                    <th>Meta</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div role=""tabpanel"" class=""tab-pane"" id=""lnk_i"">
            <div class=""page-header"">
                <h2>INFONAVIT <small>Avance mensual con respecto a la meta <span id=""lbl_i""></span></small></h2>
            </div>

            <div class=""row"">
                <div class=""col-md-4"">
                    <h3>Total <small>Créditos hipotecarios más mejoramientos</small></h3>
                    <div id=""gaugeChartInfonavit"" class=""chart""></div>
                    <div align=""center"">
                        <h4><strong><span id=""lbl_avance_i""></span></s");
            WriteLiteral(@"trong></h4>
                    </div>
                    <br />
                    <div class=""btn-group btn-group-justified"" data-toggle=""buttons"">
                        <label class=""btn btn-default active"">
                            <input type=""radio"" name=""chk_metrica_i"" value=""acciones"" autocomplete=""off"" onchange=""mostrarInfonavit()"" checked>
                            Acciones
                        </label>
                        <label class=""btn btn-default"">
                            <input type=""radio"" name=""chk_metrica_i"" value=""monto"" autocomplete=""off"" onchange=""mostrarInfonavit()"">
                            Monto
                        </label>
                    </div>
                    <br />
                    <div class=""form-group"">
                        ");
#nullable restore
#line 694 "E:\Azure\sniiv\Views\Reporte\Meta.cshtml"
                   Write(Html.DropDownList("ddl_anio_i", anios_infonavit, new { @class = "form-control" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                    </div>
                </div>
                <div class=""col-md-8"">
                    <h3>Estado</h3>
                    <div id=""barChartInfonavit"" class=""chart3""></div>
                </div>
            </div>

            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""table-responsive"">
                        <table id=""tableI"" class=""table table-condensed table-bordered table-hover"" style=""width: 100%"">
                            <thead>
                                <tr>
                                    <th>Estado</th>
                                    <th>Enero</th>
                                    <th>Febrero</th>
                                    <th>Marzo</th>
                                    <th>Abril</th>
                                    <th>Mayo</th>
                                    <th>Junio</th>
                                    <th>Julio</th>
                                    <th>Agosto</th>
        ");
            WriteLiteral(@"                            <th>Septiembre</th>
                                    <th>Octubre</th>
                                    <th>Noviembre</th>
                                    <th>Diciembre</th>
                                    <th>Meta</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

            <br />
            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""panel-group"" role=""tablist"">
                        <div class=""panel panel-info"">
                            <div class=""panel-heading"" role=""tab"" id=""collapseListGroupHeading2"">
                                <h4 class=""panel-title"">
                                    <a href=""#collapseListGroup2""");
            BeginWriteAttribute("class", " class=\"", 31611, "\"", 31619, 0);
            EndWriteAttribute();
            WriteLiteral(@" role=""button"" data-toggle=""collapse"" aria-expanded=""true"" aria-controls=""collapseListGroup2"">
                                        <span class=""glyphicon glyphicon-info-sign"" aria-hidden=""true""></span>Notas
                                    </a>
                                </h4>
                            </div>
                            <div class=""panel-collapse collapse in"" role=""tabpanel"" id=""collapseListGroup2"" aria-labelledby=""collapseListGroupHeading2"" aria-expanded=""true""");
            BeginWriteAttribute("style", " style=\"", 32117, "\"", 32125, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                                <ul class=""list-group"">
                                    <li class=""list-group-item"">
                                        <p class=""text-info""><strong>Derrama Infonavit: </strong>Son recursos que aplica el Infonavit. Incluye el monto de crédito, la subcuenta de vivienda y el ahorro voluntario.</p>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
